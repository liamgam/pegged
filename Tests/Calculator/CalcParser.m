//
//  Generated by preggers 0.1.2.
//

#import "CalcParser.h"

#import "Compiler.h"

@interface CalcParser ()

- (BOOL) _matchDot;
- (BOOL) _matchString:(char *)s;
- (BOOL) _matchClass:(unsigned char *)bits;
- (BOOL) matchCLOSE;
- (BOOL) matchDIV;
- (BOOL) matchEXP;
- (BOOL) matchEndOfFile;
- (BOOL) matchEquation;
- (BOOL) matchMINUS;
- (BOOL) matchMUL;
- (BOOL) matchNumber;
- (BOOL) matchOPEN;
- (BOOL) matchPLUS;
- (BOOL) matchPrimary;
- (BOOL) matchSecondary;
- (BOOL) matchTerminal;
- (BOOL) matchTertiary;
- (BOOL) match_;

@end


@implementation CalcParser

@synthesize dataSource = _dataSource;
@synthesize compiler = _compiler;

//==================================================================================================
#pragma mark -
#pragma mark Rules
//==================================================================================================


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 32

#ifdef matchDEBUG
#define yyprintf(args)	{ fprintf args; fprintf(stderr," @ %s\n",[[_string substringFromIndex:_index] UTF8String]); }
#else
#define yyprintf(args)
#endif

- (BOOL) _refill
{
    if (!self.dataSource)
        return NO;

    NSString *nextString = [self.dataSource nextString];
    if (nextString)
    {
        nextString = [_string stringByAppendingString:nextString];
        [_string release];
        _string = [nextString retain];
    }
    _limit = [_string lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    yyprintf((stderr, "refill"));
    return YES;
}

- (BOOL) _matchDot
{
    if (_index >= _limit && ![self _refill]) return NO;
    ++_index;
    return YES;
}

- (BOOL) _matchString:(char *)s
{
    const char *cstring = [_string UTF8String];
    int saved = _index;
    while (*s)
    {
        if (_index >= _limit && ![self _refill]) return NO;
        if (cstring[_index] != *s)
        {
            _index = saved;
            return NO;
        }
        ++s;
        ++_index;
    }
    return YES;
}

- (BOOL) _matchClass:(unsigned char *)bits
{
    if (_index >= _limit && ![self _refill]) return NO;
    int c = [_string characterAtIndex:_index];
    if (bits[c >> 3] & (1 << (c & 7)))
    {
        ++_index;
        yyprintf((stderr, "  ok   _matchClass"));
        return YES;
    }
    yyprintf((stderr, "  fail _matchClass"));
    return NO;
}

- (void) yyDo:(SEL)action
{
    while (yythunkpos >= yythunkslen)
    {
        yythunkslen *= 2;
        yythunks= realloc(yythunks, sizeof(yythunk) * yythunkslen);
    }
    yythunks[yythunkpos].begin=  yybegin;
    yythunks[yythunkpos].end=    yyend;
    yythunks[yythunkpos].action= action;
    ++yythunkpos;
}

- (void) yyText:(int)begin to:(int)end
{
    int len = end - begin;
    if (len <= 0)
    {
        [_text release];
        _text = nil;
    }
    else
    {
        _text = [_string substringWithRange:NSMakeRange(begin, end-begin)];
        [_text retain];
    }
}

- (void) yyDone
{
    int pos;
    for (pos= 0;  pos < yythunkpos;  ++pos)
    {
        yythunk *thunk= &yythunks[pos];
        [self yyText:thunk->begin to:thunk->end];
        yyprintf((stderr, "DO [%d] %s %s\n", pos, [NSStringFromSelector(thunk->action) UTF8String], yytext));
        [self performSelector:thunk->action withObject:_text];
    }
    yythunkpos= 0;
}

- (void) yyCommit
{
    NSString *newString = [_string substringFromIndex:_index];
    [_string release];
    _string = [newString retain];
    _limit -= _index;
    _index = 0;

    yybegin -= _index;
    yyend -= _index;
    yythunkpos= 0;
}

- (void) yy_1_Primary:(NSString *)text
{
 [self.compiler add]; ;
}

- (void) yy_2_Primary:(NSString *)text
{
 [self.compiler subtract]; ;
}

- (void) yy_1_Secondary:(NSString *)text
{
 [self.compiler multiply]; ;
}

- (void) yy_2_Secondary:(NSString *)text
{
 [self.compiler divide];   ;
}

- (void) yy_1_Tertiary:(NSString *)text
{
 [self.compiler exponent]; ;
}

- (void) yy_1_Terminal:(NSString *)text
{
 [self.compiler negative]; ;
}

- (void) yy_2_Terminal:(NSString *)text
{
 [self.compiler pushNumber:text]; ;
}

- (BOOL) matchCLOSE
{
    NSUInteger index0=_index, yythunkpos1=yythunkpos;
    yyprintf((stderr, "%s", "CLOSE"));
    if (![self _matchString:")"]) goto L2;
    if (![self match_]) goto L2;
    yyprintf((stderr, "  ok   %s", "CLOSE"));
    return YES;
L2:
    _index=index0; yythunkpos=yythunkpos1;
    yyprintf((stderr, "  fail %s", "CLOSE"));
    return NO;
}

- (BOOL) matchDIV
{
    NSUInteger index5=_index, yythunkpos6=yythunkpos;
    yyprintf((stderr, "%s", "DIV"));
    if (![self _matchString:"/"]) goto L7;
    if (![self match_]) goto L7;
    yyprintf((stderr, "  ok   %s", "DIV"));
    return YES;
L7:
    _index=index5; yythunkpos=yythunkpos6;
    yyprintf((stderr, "  fail %s", "DIV"));
    return NO;
}

- (BOOL) matchEXP
{
    NSUInteger index10=_index, yythunkpos11=yythunkpos;
    yyprintf((stderr, "%s", "EXP"));
    if (![self _matchString:"**"]) goto L12;
    if (![self match_]) goto L12;
    yyprintf((stderr, "  ok   %s", "EXP"));
    return YES;
L12:
    _index=index10; yythunkpos=yythunkpos11;
    yyprintf((stderr, "  fail %s", "EXP"));
    return NO;
}

- (BOOL) matchEndOfFile
{
    NSUInteger index15=_index, yythunkpos16=yythunkpos;
    yyprintf((stderr, "%s", "EndOfFile"));
    NSUInteger index18=_index, yythunkpos19=yythunkpos;
    if ([self _matchDot]) goto L17;
    _index=index18; yythunkpos=yythunkpos19;
    yyprintf((stderr, "  ok   %s", "EndOfFile"));
    return YES;
L17:
    _index=index15; yythunkpos=yythunkpos16;
    yyprintf((stderr, "  fail %s", "EndOfFile"));
    return NO;
}

- (BOOL) matchEquation
{
    NSUInteger index20=_index, yythunkpos21=yythunkpos;
    yyprintf((stderr, "%s", "Equation"));
    if (![self matchPrimary]) goto L22;
    if (![self matchEndOfFile]) goto L22;
    yyprintf((stderr, "  ok   %s", "Equation"));
    return YES;
L22:
    _index=index20; yythunkpos=yythunkpos21;
    yyprintf((stderr, "  fail %s", "Equation"));
    return NO;
}

- (BOOL) matchMINUS
{
    NSUInteger index25=_index, yythunkpos26=yythunkpos;
    yyprintf((stderr, "%s", "MINUS"));
    if (![self _matchString:"-"]) goto L27;
    if (![self match_]) goto L27;
    yyprintf((stderr, "  ok   %s", "MINUS"));
    return YES;
L27:
    _index=index25; yythunkpos=yythunkpos26;
    yyprintf((stderr, "  fail %s", "MINUS"));
    return NO;
}

- (BOOL) matchMUL
{
    NSUInteger index30=_index, yythunkpos31=yythunkpos;
    yyprintf((stderr, "%s", "MUL"));
    if (![self _matchString:"*"]) goto L32;
    if (![self match_]) goto L32;
    yyprintf((stderr, "  ok   %s", "MUL"));
    return YES;
L32:
    _index=index30; yythunkpos=yythunkpos31;
    yyprintf((stderr, "  fail %s", "MUL"));
    return NO;
}

- (BOOL) matchNumber
{
    NSUInteger index35=_index, yythunkpos36=yythunkpos;
    yyprintf((stderr, "%s", "Number"));
    yybegin = _index;
    if (![self _matchClass:(unsigned char *)"\000\000\000\000\000\010\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"]) goto L37;
    yyend = _index;
    if (![self match_]) goto L37;
    yyprintf((stderr, "  ok   %s", "Number"));
    return YES;
L37:
    _index=index35; yythunkpos=yythunkpos36;
    yyprintf((stderr, "  fail %s", "Number"));
    return NO;
}

- (BOOL) matchOPEN
{
    NSUInteger index40=_index, yythunkpos41=yythunkpos;
    yyprintf((stderr, "%s", "OPEN"));
    if (![self _matchString:"("]) goto L42;
    if (![self match_]) goto L42;
    yyprintf((stderr, "  ok   %s", "OPEN"));
    return YES;
L42:
    _index=index40; yythunkpos=yythunkpos41;
    yyprintf((stderr, "  fail %s", "OPEN"));
    return NO;
}

- (BOOL) matchPLUS
{
    NSUInteger index45=_index, yythunkpos46=yythunkpos;
    yyprintf((stderr, "%s", "PLUS"));
    if (![self _matchString:"+"]) goto L47;
    if (![self match_]) goto L47;
    yyprintf((stderr, "  ok   %s", "PLUS"));
    return YES;
L47:
    _index=index45; yythunkpos=yythunkpos46;
    yyprintf((stderr, "  fail %s", "PLUS"));
    return NO;
}

- (BOOL) matchPrimary
{
    NSUInteger index50=_index, yythunkpos51=yythunkpos;
    yyprintf((stderr, "%s", "Primary"));
    if (![self matchSecondary]) goto L52;
    ;
    NSUInteger index55, yythunkpos56;
L57:
    index55=_index; yythunkpos56=yythunkpos;
    NSUInteger index59=_index, yythunkpos60=yythunkpos;
    if (![self matchPLUS]) goto L62;
    if (![self matchSecondary]) goto L62;
    [self yyDo:@selector(yy_1_Primary:)];
    goto L61;
L62:
    _index=index59; yythunkpos=yythunkpos60;
    if (![self matchMINUS]) goto L58;
    if (![self matchSecondary]) goto L58;
    [self yyDo:@selector(yy_2_Primary:)];
    goto L61;
L61:
    goto L57;
L58:
    _index=index55; yythunkpos=yythunkpos56;
    yyprintf((stderr, "  ok   %s", "Primary"));
    return YES;
L52:
    _index=index50; yythunkpos=yythunkpos51;
    yyprintf((stderr, "  fail %s", "Primary"));
    return NO;
}

- (BOOL) matchSecondary
{
    NSUInteger index67=_index, yythunkpos68=yythunkpos;
    yyprintf((stderr, "%s", "Secondary"));
    if (![self matchTertiary]) goto L69;
    ;
    NSUInteger index72, yythunkpos73;
L74:
    index72=_index; yythunkpos73=yythunkpos;
    NSUInteger index76=_index, yythunkpos77=yythunkpos;
    if (![self matchMUL]) goto L79;
    if (![self matchTertiary]) goto L79;
    [self yyDo:@selector(yy_1_Secondary:)];
    goto L78;
L79:
    _index=index76; yythunkpos=yythunkpos77;
    if (![self matchDIV]) goto L75;
    if (![self matchTertiary]) goto L75;
    [self yyDo:@selector(yy_2_Secondary:)];
    goto L78;
L78:
    goto L74;
L75:
    _index=index72; yythunkpos=yythunkpos73;
    yyprintf((stderr, "  ok   %s", "Secondary"));
    return YES;
L69:
    _index=index67; yythunkpos=yythunkpos68;
    yyprintf((stderr, "  fail %s", "Secondary"));
    return NO;
}

- (BOOL) matchTerminal
{
    NSUInteger index84=_index, yythunkpos85=yythunkpos;
    yyprintf((stderr, "%s", "Terminal"));
    NSUInteger index87=_index, yythunkpos88=yythunkpos;
    if (![self matchOPEN]) goto L90;
    if (![self matchPrimary]) goto L90;
    if (![self matchCLOSE]) goto L90;
    goto L89;
L90:
    _index=index87; yythunkpos=yythunkpos88;
    ;
    NSUInteger index95, yythunkpos96;
L97:
    index95=_index; yythunkpos96=yythunkpos;
    NSUInteger index99=_index, yythunkpos100=yythunkpos;
    if (![self matchPLUS]) goto L102;
    goto L101;
L102:
    _index=index99; yythunkpos=yythunkpos100;
    if (![self matchMINUS]) goto L98;
    [self yyDo:@selector(yy_1_Terminal:)];
    goto L101;
L101:
    goto L97;
L98:
    _index=index95; yythunkpos=yythunkpos96;
    if (![self matchNumber]) goto L86;
    [self yyDo:@selector(yy_2_Terminal:)];
    goto L89;
L89:
    yyprintf((stderr, "  ok   %s", "Terminal"));
    return YES;
L86:
    _index=index84; yythunkpos=yythunkpos85;
    yyprintf((stderr, "  fail %s", "Terminal"));
    return NO;
}

- (BOOL) matchTertiary
{
    NSUInteger index105=_index, yythunkpos106=yythunkpos;
    yyprintf((stderr, "%s", "Tertiary"));
    NSUInteger index108=_index, yythunkpos109=yythunkpos;
    if (![self matchTerminal]) goto L111;
    if (![self matchEXP]) goto L111;
    if (![self matchTertiary]) goto L111;
    [self yyDo:@selector(yy_1_Tertiary:)];
    goto L110;
L111:
    _index=index108; yythunkpos=yythunkpos109;
    if (![self matchTerminal]) goto L107;
    goto L110;
L110:
    yyprintf((stderr, "  ok   %s", "Tertiary"));
    return YES;
L107:
    _index=index105; yythunkpos=yythunkpos106;
    yyprintf((stderr, "  fail %s", "Tertiary"));
    return NO;
}

- (BOOL) match_
{
    NSUInteger index114=_index, yythunkpos115=yythunkpos;
    yyprintf((stderr, "%s", "_"));
    ;
    NSUInteger index117, yythunkpos118;
L119:
    index117=_index; yythunkpos118=yythunkpos;
    if (![self _matchString:" "]) goto L120;
    goto L119;
L120:
    _index=index117; yythunkpos=yythunkpos118;
    yyprintf((stderr, "  ok   %s", "_"));
    return YES;
L116:
    _index=index114; yythunkpos=yythunkpos115;
    yyprintf((stderr, "  fail %s", "_"));
    return NO;
}

- (BOOL) yyparsefrom:(SEL)startRule
{
    BOOL yyok;
    if (!yythunkslen)
    {
        yythunkslen= 32;
        yythunks= malloc(sizeof(yythunk) * yythunkslen);
        yybegin= yyend= yythunkpos= 0;
    }
    if (!_string)
    {
        _string = [NSString new];
        _limit = 0;
        _index = 0;
    }
    yybegin= yyend= _index;
    yythunkpos= 0;

    NSMethodSignature *sig = [[self class] instanceMethodSignatureForSelector:startRule];
    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];
    [invocation setTarget:self];
    [invocation setSelector:startRule];
    [invocation invoke];
    [invocation getReturnValue:&yyok];
    if (yyok) [self yyDone];
    [self yyCommit];

    [_string release];
    _string = nil;
    [_text release];
    _text = nil;

    return yyok;
}

- (BOOL) yyparse
{
    return [self yyparsefrom:@selector(matchEquation)];
}


//==================================================================================================
#pragma mark -
#pragma mark NSObject Methods
//==================================================================================================

- (void) dealloc
{
    free(yythunks);

    [_string release];

    [super dealloc];
}


//==================================================================================================
#pragma mark -
#pragma mark Public Methods
//==================================================================================================

- (BOOL) parse
{
    NSAssert(_dataSource != nil, @"can't call -parse without specifying a data source");
    return [self yyparse];
}


- (BOOL) parseString:(NSString *)string
{
    _string = [string copy];
    _limit  = [_string lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    _index  = 0;
    BOOL retval = [self yyparse];
    [_string release];
    _string = nil;
    return retval;
}


@end

